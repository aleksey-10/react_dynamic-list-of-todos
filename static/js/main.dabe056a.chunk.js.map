{"version":3,"sources":["api/api.ts","components/TodoItem.tsx/TodoItem.tsx","components/SortField/SortField.tsx","components/TodoList/TodoList.tsx","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["loadData","name","a","fetch","response","json","data","TodoItem","id","title","userName","completed","key","type","readOnly","checked","className","SortField","position","isActive","handleChange","htmlFor","onChange","TodoList","todos","useState","activeSortName","setActiveSortName","todosSorted","sort","b","Number","user","localeCompare","sortTodos","sortName","map","todo","TodoApp","setTodos","isLoading","setIsLoading","isFetched","setIsFetched","load","usersFromServer","todosFromServer","find","userId","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dabe056a.chunk.js","sourcesContent":["export const loadData = async <T>(name: string): Promise<T[]> => {\n  const response = await fetch(`https://mate-academy.github.io/react_dynamic-list-of-todos/api/${name}.json`);\n  const data = await response.json();\n\n  return data;\n};\n","import React, { FC } from 'react';\n\ninterface TodoItemProps {\n  id: number;\n  userName: string;\n  completed: boolean;\n  title: string;\n}\n\nexport const TodoItem: FC<TodoItemProps> = ({\n  id,\n  title,\n  userName,\n  completed,\n}) => (\n  <li key={id}>\n    <input\n      type=\"checkbox\"\n      readOnly\n      checked={completed}\n    />\n    <span>{title}</span>\n    <small className=\"right\">{userName}</small>\n  </li>\n);\n","import React, { FC } from 'react';\n\ninterface SortFieldProps {\n  name: string;\n  position: string;\n  handleChange(sortName: string): void;\n  isActive: boolean;\n}\n\nexport const SortField: FC<SortFieldProps> = ({\n  name,\n  position,\n  isActive,\n  handleChange,\n}) => (\n  <div className={`col s4 ${position}-align`}>\n    <label htmlFor={`sortBy${name}`}>\n      <input\n        type=\"checkbox\"\n        id={`sortBy${name}`}\n        checked={isActive}\n        onChange={() => handleChange(name)}\n      />\n      <i className={`medium material-icons arrow ${isActive && 'arrow--active'}`}>\n        arrow_drop_down\n      </i>\n    </label>\n  </div>\n);\n","import React, { useState, FC } from 'react';\nimport { TodoInterface } from '../../interfaces/TodoInterface';\nimport { TodoItem } from '../TodoItem.tsx/TodoItem';\nimport { SortField } from '../SortField';\n\ntype TodoListProps = {\n  todos: TodoInterface[];\n};\n\nexport const TodoList: FC<TodoListProps> = ({ todos }) => {\n  const [activeSortName, setActiveSortName] = useState<string>('userName');\n  const todosSorted = [...todos].sort((a, b) => {\n    if (activeSortName === 'completed') {\n      return Number(a.completed) - Number(b.completed);\n    }\n\n    if (activeSortName === 'userName' && (a.user && b.user)) {\n      return a.user.name.localeCompare(b.user.name);\n    }\n\n    return a.title.localeCompare(b.title);\n  });\n\n  const sortTodos = (sortName: string) => {\n    setActiveSortName(sortName);\n  };\n\n  return (\n    <ul>\n      <li className=\"row\">\n        <SortField\n          name=\"completed\"\n          position=\"left\"\n          handleChange={sortTodos}\n          isActive={activeSortName === 'completed'}\n        />\n        <SortField\n          name=\"title\"\n          position=\"center\"\n          handleChange={sortTodos}\n          isActive={activeSortName === 'title'}\n        />\n        <SortField\n          name=\"userName\"\n          position=\"right\"\n          handleChange={sortTodos}\n          isActive={activeSortName === 'userName'}\n        />\n      </li>\n      {\n        todosSorted.map((todo: TodoInterface) => (\n          todo.user && (\n            <TodoItem\n              id={todo.id}\n              key={todo.id}\n              completed={todo.completed}\n              userName={todo.user.name}\n              title={todo.title}\n            />\n          )\n        ))\n      }\n    </ul>\n  );\n};\n","import React, { useState, FC } from 'react';\nimport { loadData } from '../../api/api';\nimport { TodoList } from '../TodoList';\nimport { TodoInterface } from '../../interfaces/TodoInterface';\nimport { UserInterface } from '../../interfaces/UserInterface';\n\nexport const TodoApp: FC = () => {\n  const [todos, setTodos] = useState<TodoInterface[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isFetched, setIsFetched] = useState<boolean>(false);\n\n  const load = async () => {\n    setIsLoading(true);\n    const usersFromServer = await loadData<UserInterface>('users');\n    const todosFromServer = await loadData<TodoInterface>('todos');\n\n    setTodos(todosFromServer.map((todo) => ({\n      ...todo,\n      user: usersFromServer.find((user) => user.id === todo.userId),\n    })));\n\n    setIsLoading(false);\n    setIsFetched(true);\n  };\n\n  if (!isFetched) {\n    return (\n      <div className=\"center-align\">\n        {\n          !isLoading\n            ? (\n              <button\n                type=\"button\"\n                className=\"btn btn-large\"\n                onClick={load}\n              >\n                Load\n              </button>\n            )\n            : (\n              <h5>Loading...</h5>\n            )\n        }\n      </div>\n    );\n  }\n\n  return <TodoList todos={todos} />;\n};\n","import React, { FC } from 'react';\nimport './App.css';\nimport { TodoApp } from './components/TodoApp';\n\nconst App: FC = () => (\n  <div className=\"container\">\n    <h1>Dynamic list of TODOs</h1>\n    <TodoApp />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}